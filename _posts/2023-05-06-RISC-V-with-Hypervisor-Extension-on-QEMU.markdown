---
layout: post
title: "Running RISC-V with Hypervisor Extension on QEMU"
categories: RISC-V Virtualization
---

# RISC-V, Virtualization and the Hypervisor Extension

This section will be updated soon.

# Running Linux Hypervisor and Linux Guest on QEMU

We will follow the following steps to cross compile the linux hypervisor and guest, compile a qemu with hypervisor extension and then run the hypervisor + guest on qemu.

1. [Environment used](#Environment)
2. [Getting the risc-v cross compilation toolchain](#getting-the-risc-v-cross-compilation-toolchain)
3. [Compile qemu-system-riscv64 that supports the hypervisor extension](#compile-qemu-system-riscv64-that-supports-the-hypervisor-extension)
4. [Use buildroot to build a linux hypervisor](#use-buildroot-to-build-a-linux-hypervisor)
5. Use kvmtool to start the guest OS
6. [References](#references)


## Environment
Ubuntu 20.04 with sudo rights.

## Getting the RISC-V Cross Compilation Toolchain
To cross compile for RISC-V linux, we need to use the cross compilation toolchain. It can be downloaded from [github](#https://github.com/riscv-collab/riscv-gnu-toolchain). For our use case, it is suffice to download one from their releases, instead of compiling from source. The releases can be found [here](#https://github.com/riscv-collab/riscv-gnu-toolchain/tags). We will look for one with name `riscv64-glibc-ubuntu-20.04-xxxxx-tar.gz`. You can download with `wget` and unzip with `tar -xvzf`.

```
$ wget https://github.com/riscv-collab/riscv-gnu-toolchain/releases/download/2023.04.29/riscv64-glibc-ubuntu-20.04-nightly-2023.04.29-nightly.tar.gz
$ tar -xvzf riscv64-glibc-ubuntu-20.04-nightly-2023.04.29-nightly.tar.gz
```

## Compile qemu-system-riscv64 that Supports the Hypervisor Extension
By default, qemu-system-riscv64 does not support the hypervisor extension. Hence we need to compile qemu from source.
First, get the essential packages following the [qemu wiki guide](#https://wiki.qemu.org/Hosts/Linux). 

```
$ sudo apt install git libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev ninja-build
```
It is possible to compile these packages from source and use them, but it would be quite complicated.

Get the repository:
```
$ git clone https://gitlab.com/qemu-project/qemu
$ cd qemu
$ git submodule init
$ git submodule update --recursive
```

Build qemu-system-riscv64 with hypervisor extension:
```
$ ./configure --target-list="riscv64-softmmu"
$ make -j $(nproc)
```
The built qemu executable will be under `./build/`.

We can check that h-extension is indeed enabled:
```
$ ./build/qemu-system-riscv64 -M virt -bios default -nographic
```
We can see that `Boot HART Base ISA        : rv64imafdch`, which includes `h`.

Use `ctrl-a` followed by `ctrl-x` to quit qemu.

## Use buildroot to Build a Linux Hypervisor

There are many ways to build a linux kernel and a rootfs. Using buildroot is one of the less complicated option.

Get [Buildroot](#https://buildroot.org/):
[Download build root](#https://buildroot.org/download.html)

Building linux kernel, busybox or buildroot uses similar workflow. First `make defconfig` to generate a `.config` file. Then `make -j $(nproc)` to actually build it.

First, make sure that the `riscv-gnu-toolchain` is on our `PATH`.
```
$ PATH_TO_RISCV_TOOLCHAIN=/path/to/riscv-gnu-toolchain/
$ export PATH=$PATH_TO_RISCV_TOOLCHAIN:$PATH
```
Then generate default `.config` for RISC-V.
```
$ export ARCH=riscv
$ export CROSS_COMPILE=riscv64-unknown-linux-gnu-
$ make defconfig
```

Then further modify the config with menu config.
```
$ make menuconfig
```
- Under `Toolchain`, set toolchain type to external toolchain (Using the default option is fine, just that buildroot will download the toolchain for you). `Toolchain has xxx support` should also be configured accordingly. ![buildroot-toolchain-menuconfig](/images/RISCV-with-H-extension-QEMU/buildroot_menuconfig_toolchain.png)

- Under `System configuration`, set `Root filesystem overlay directories` to a folder on your host machine. The content of the folder will appear in the filesystem in the built image.

- Under `Filesystem images`, set the filesystem type to `ext4`. Increase the `exact size` for more spaces on the filesystem.

- Save and exit.

Now we can compile the kernel.
```
$ make -j $(nproc)
```

The kernel source as well as built items can be found under `./output/build/linux-?.?`. The kernel image will be under `arch/riscv/boot/Image` and the kvm module will be under `arch/riscv/kvm/kvm.ko`.

Note: to rebuild the linux kernel and kernel modules, use (under buildroot folder):
```
$ make -j $(nproc) linux-rebuild
```

The autogenerated booting instruction can be found under `./ board/qemu/riscv64-virt/readme.txt`. However, this does not seem to work. Instead, we will use the following:
```

```
## References
This blog is mainly based on these existing sources. Links to documentations are also included.

1. https://github.com/kvm-riscv/howto/wiki/KVM-RISCV64-on-QEMU
